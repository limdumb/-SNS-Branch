"use client";

import type { Metadata } from "next";
import AsideBar from "@/components/asideBar/AsideBar";
import Header from "@/components/Header";
import WritePostInput from "@/components/home/WritePostInput";
import { ChangeEvent, useEffect, useState } from "react";
import { usePathname } from "next/navigation";
import styles from "./style/layout.module.css";
import Modal from "./Modal";
import { createdNewPost } from "@/api/createdNewPost";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export interface CreatePostType {
  user: {
    id: number;
    nickName: string;
    imageUrl: string;
  };
  contents: string;
}

export default function Layout({ children }: { children: React.ReactNode }) {
  const pathValue = usePathname();

  const [tabValue, setTabValue] = useState("");
  const [mounted, setMounted] = useState<boolean>(false);
  const [postWriteValue, setPostWriteValue] = useState("");
  const [modalClicked, setModalClicked] = useState(false);

  const postRequest: CreatePostType = {
    user: {
      id: 1,
      nickName: "아리아리송송",
      imageUrl: "이미지",
    },
    contents: postWriteValue,
  };

  const onChangedPostWrite = (e: ChangeEvent<HTMLTextAreaElement>) => {
    setPostWriteValue(e.target.value);
  };

  const onSubmitPostWirte = async (props: CreatePostType) => {
    const request: CreatePostType = {
      user: props.user,
      contents: props.contents,
    };

    const response = await createdNewPost(request);
    return response;
  };

  const changeModalClicked = () => {
    setModalClicked(!modalClicked);
  };

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    const getPathValue = () => {
      if (pathValue === "/") {
        setTabValue("Home");
      }

      if (pathValue === "/friends") {
        setTabValue("Frineds");
      }

      if (pathValue === "/commercial") {
        setTabValue("Commercial");
      }

      if (pathValue === "/profile") {
        setTabValue("Profile");
      }

      if (pathValue === "/messages") {
        setTabValue("Messages");
      }
    };

    getPathValue();
  }, [pathValue]);

  return (
    <>
      {mounted && (
        <div className={styles.Layout_Container}>
          <AsideBar />
          <div className={styles.Layout_Wrapper}>
            <Header changeModalClicked={changeModalClicked} routes={tabValue} />
            <WritePostInput
              inputValue={postWriteValue}
              changeFunction={onChangedPostWrite}
              submitFunction={onSubmitPostWirte}
              postRequest={postRequest}
            />
            <div className={styles.Contents_Container}>{children}</div>
          </div>
          {modalClicked ? (
            <Modal changeModalClicked={changeModalClicked} />
          ) : null}
        </div>
      )}
    </>
  );
}
